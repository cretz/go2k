buildscript {
    ext.kotlin_version = '1.3.10'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}
allprojects {
    repositories {
        mavenCentral()
    }
}
project(':compiler') {
    apply plugin: 'kotlin'
    apply plugin: 'application'
    apply plugin: 'com.google.protobuf'
    sourceCompatibility = '1.8'
    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    mainClassName = 'go2k.compile.MainKt'

    dependencies {
        compile project(':runtime:runtime-jvm')
        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        compile 'org.jetbrains.kotlin:kotlin-reflect'
        compile 'org.jetbrains.kotlin:kotlin-compiler'
        compile 'com.github.cretz.kastree:kastree-ast-jvm:0.2.0'
        compile 'com.github.cretz.pbandk:pbandk-runtime-jvm:0.2.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.1.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    }

    test {
        useJUnitPlatform()
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = true
            exceptionFormat = 'full'
            events 'passed', 'skipped', 'failed'
        }
    }

    compileJava.enabled = false
    compileTestJava.enabled = false

    // TODO: Remove when there is a setting to make generateProto manual only
    // Ref: https://github.com/google/protobuf-gradle-plugin/issues/256
    gradle.taskGraph.whenReady { graph ->
        // Only enable the proto task when called explicitly
        generateProto.enabled = graph.allTasks.last().class.name.contains('protobuf')
    }

    protobuf {
        generatedFilesBaseDir = "$projectDir/src"
        protoc {
            artifact = 'com.google.protobuf:protoc:3.5.1'
        }
        generateProtoTasks {
            all().each { task ->
                task.outputs.upToDateWhen { false }
                task.builtins {
                    remove java
                }
                task.plugins {
                    kotlin {
                        option 'kotlin_package=go2k.compile.dumppb'
                    }
                }
            }
        }
    }

    if (System.getenv('PROTOC_KOTLIN') != null) {
        protobuf {
            plugins {
                kotlin {
                    path = System.getenv('PROTOC_KOTLIN')
                }
            }
        }
    }
}

project(':runtime:runtime-common') {
    apply plugin: 'kotlin-platform-common'
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.0.1'
        testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    }
}

project(':runtime:runtime-jvm') {
    apply plugin: 'kotlin-platform-jvm'
    sourceCompatibility = '1.6'
    compileKotlin {
        kotlinOptions.jvmTarget = '1.6'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.6'
    }
    dependencies {
        expectedBy project(':runtime:runtime-common')
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'
        testCompile 'junit:junit:4.12'
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
    test {
        testLogging {
            outputs.upToDateWhen {false}
            showStandardStreams = true
            exceptionFormat = 'full'
            events 'passed', 'skipped', 'failed'
        }
    }
}