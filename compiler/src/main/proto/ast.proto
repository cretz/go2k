syntax = "proto3";
package pb;

import "token.proto";
import "type.proto";

message Comment {
  int32 slash = 1;
  string text = 2;
}

message CommentGroup {
  repeated Comment list = 1;
}

message Field {
  CommentGroup doc = 1;
  repeated Ident names = 2;
  Expr type = 3;
  BasicLit tag = 4;
  CommentGroup comment = 5;
}

message FieldList {
  int32 opening = 1;
  repeated Field list = 2;
  int32 closing = 3;
}

message Expr {
  oneof expr {
    BadExpr bad_expr = 1;
    Ident ident = 2;
    Ellipsis ellipsis = 3;
    BasicLit basic_lit = 4;
    FuncLit func_lit = 5;
    CompositeLit composite_lit = 6;
    ParenExpr paren_expr = 7;
    SelectorExpr selector_expr = 8;
    IndexExpr index_expr = 9;
    SliceExpr slice_expr = 10;
    TypeAssertExpr type_assert_expr = 11;
    CallExpr call_expr = 12;
    StarExpr star_expr = 13;
    UnaryExpr unary_expr = 14;
    BinaryExpr binary_expr = 15;
    KeyValueExpr key_value_expr = 16;
    ArrayType array_type = 17;
    StructType struct_type = 18;
    FuncType func_type = 19;
    InterfaceType interface_type = 20;
    MapType map_type = 21;
    ChanType chan_type = 22;
  }
}

message BadExpr {
  int32 from = 1;
  int32 to = 2;
  TypeInfo type_info = 3;
}

message Ident {
  int32 name_pos = 1;
  string name = 2;
  TypeInfo type_info = 3;
  TypeInfo def_type_info = 4;
}

message Ellipsis {
  int32 ellipsis = 1;
  Expr elt = 2;
  TypeInfo type_info = 3;
}

message BasicLit {
  int32 value_pos = 1;
  Token kind = 2;
  string value = 3;
  TypeInfo type_info = 4;
}

message FuncLit {
  FuncType type = 1;
  BlockStmt body = 2;
  TypeInfo type_info = 3;
}

message CompositeLit {
  Expr type = 1;
  int32 lbrace = 2;
  repeated Expr elts = 3;
  int32 rbrace = 4;
  TypeInfo type_info = 5;
}

message ParenExpr {
  int32 lparen = 1;
  Expr x = 2;
  int32 rparen = 3;
  TypeInfo type_info = 4;
}

message SelectorExpr {
  Expr x = 1;
  Ident sel = 2;
  TypeInfo type_info = 3;
}

message IndexExpr {
  Expr x = 1;
  int32 lbrack = 2;
  Expr index = 3;
  int32 rbrack = 4;
  TypeInfo type_info = 5;
}

message SliceExpr {
  Expr x = 1;
  int32 lbrack = 2;
  Expr low = 3;
  Expr high = 4;
  Expr max = 5;
  bool slice3 = 6;
  int32 rbrack = 7;
  TypeInfo type_info = 8;
}

message TypeAssertExpr {
  Expr x = 1;
  int32 lparen = 2;
  Expr type = 3;
  int32 rparen = 4;
  TypeInfo type_info = 5;
}

message CallExpr {
  Expr fun = 1;
  int32 lparen = 2;
  repeated Expr args = 3;
  int32 ellipsis = 4;
  int32 rparen = 5;
  TypeInfo type_info = 6;
}

message StarExpr {
  int32 star = 1;
  Expr x = 2;
  TypeInfo type_info = 3;
}

message UnaryExpr {
  int32 op_pos = 1;
  Token op = 2;
  Expr x = 3;
  TypeInfo type_info = 4;
}

message BinaryExpr {
  Expr x = 1;
  int32 op_pos = 2;
  Token op = 3;
  Expr y = 4;
  TypeInfo type_info = 5;
}

message KeyValueExpr {
  Expr key = 1;
  int32 colon = 2;
  Expr value = 3;
  TypeInfo type_info = 4;
}

message ArrayType {
  int32 lbrack = 1;
  Expr len = 2;
  Expr elt = 3;
  TypeInfo type_info = 4;
}

message StructType {
  int32 struct = 1;
  FieldList fields = 2;
  bool incomplete = 3;
  TypeInfo type_info = 4;
}

message FuncType {
  int32 func = 1;
  FieldList params = 2;
  FieldList results = 3;
  TypeInfo type_info = 4;
}

message InterfaceType {
  int32 interface = 1;
  FieldList methods = 2;
  bool incomplete = 3;
  TypeInfo type_info = 4;
}

message MapType {
  int32 map = 1;
  Expr key = 2;
  Expr value = 3;
  TypeInfo type_info = 4;
}

message ChanType {
  int32 begin = 1;
  int32 arrow = 2;
  bool send_dir = 3;
  bool recv_dir = 4;
  Expr value = 5;
  TypeInfo type_info = 6;
}

message Stmt {
  oneof stmt {
    BadStmt bad_stmt = 1;
    DeclStmt decl_stmt = 2;
    EmptyStmt empty_stmt = 3;
    LabeledStmt labeled_stmt = 4;
    ExprStmt expr_stmt = 5;
    SendStmt send_stmt = 6;
    IncDecStmt inc_dec_stmt = 7;
    AssignStmt assign_stmt = 8;
    GoStmt go_stmt = 9;
    DeferStmt defer_stmt = 10;
    ReturnStmt return_stmt = 11;
    BranchStmt branch_stmt = 12;
    BlockStmt block_stmt = 13;
    IfStmt if_stmt = 14;
    CaseClause case_clause = 15;
    SwitchStmt switch_stmt = 16;
    TypeSwitchStmt type_switch_stmt = 17;
    CommClause comm_clause = 18;
    SelectStmt select_stmt = 19;
    ForStmt for_stmt = 20;
    RangeStmt range_stmt = 21;
  }
}

message BadStmt {
  int32 from = 1;
  int32 to = 2;
}

message DeclStmt {
  Decl decl = 1;
}

message EmptyStmt {
  int32 semicolon = 1;
  bool implicit = 2;
}

message LabeledStmt {
  Ident label = 1;
  int32 colon = 2;
  Stmt stmt = 3;
}

message ExprStmt {
  Expr x = 1;
}

message SendStmt {
  Expr chan = 1;
  int32 arrow = 2;
  Expr value = 3;
}

message IncDecStmt {
  Expr x = 1;
  int32 tok_pos = 2;
  Token tok = 3;
}

message AssignStmt {
  repeated Expr lhs = 1;
  int32 tok_pos = 2;
  Token tok = 3;
  repeated Expr rhs = 4;
}

message GoStmt {
  int32 go = 1;
  CallExpr call = 2;
}

message DeferStmt {
  int32 defer = 1;
  CallExpr call = 2;
}

message ReturnStmt {
  int32 return = 1;
  repeated Expr results = 2;
}

message BranchStmt {
  int32 tok_pos = 1;
  Token tok = 2;
  Ident label = 3;
}

message BlockStmt {
  int32 lbrace = 1;
  repeated Stmt list = 2;
  int32 rbrace = 3;
}

message IfStmt {
  int32 if = 1;
  Stmt init = 2;
  Expr cond = 3;
  BlockStmt body = 4;
  Stmt else = 5;
}

message CaseClause {
  int32 case = 1;
  repeated Expr list = 2;
  int32 colon = 3;
  repeated Stmt body = 4;
}

message SwitchStmt {
  int32 switch = 1;
  Stmt init = 2;
  Expr tag = 3;
  BlockStmt body = 4;
}

message TypeSwitchStmt {
  int32 switch = 1;
  Stmt init = 2;
  Stmt assign = 3;
  BlockStmt body = 4;
}

message CommClause {
  int32 case = 1;
  Stmt comm = 2;
  int32 colon = 3;
  repeated Stmt body = 4;
}

message SelectStmt {
  int32 select = 1;
  BlockStmt body = 2;
}

message ForStmt {
  int32 for = 1;
  Stmt init = 2;
  Expr cond = 3;
  Stmt post = 4;
  BlockStmt body = 5;
}

message RangeStmt {
  int32 for = 1;
  Expr key = 2;
  Expr value = 3;
  int32 tok_pos = 4;
  Token tok = 5;
  Expr x = 6;
  BlockStmt body = 7;
}

message Spec {
  oneof spec {
    ImportSpec import_spec = 1;
    ValueSpec value_spec = 2;
    TypeSpec type_spec = 3;
  }
}

message ImportSpec {
  CommentGroup doc = 1;
  Ident name = 2;
  BasicLit path = 3;
  CommentGroup comment = 4;
  int32 end_pos = 5;
}

message ValueSpec {
  CommentGroup doc = 1;
  repeated Ident names = 2;
  Expr type = 3;
  repeated Expr values = 4;
  CommentGroup comment = 5;
}

message TypeSpec {
  CommentGroup doc = 1;
  Ident name = 2;
  int32 assign = 3;
  Expr type = 4;
  CommentGroup comment = 5;
}

message Decl {
  oneof decl {
    BadDecl bad_decl = 1;
    GenDecl gen_decl = 2;
    FuncDecl func_decl = 3;
  }
}

message BadDecl {
  int32 from = 1;
  int32 to = 2;
}

message GenDecl {
  CommentGroup doc = 1;
  int32 tok_pos = 2;
  Token tok = 3;
  int32 lparen = 4;
  repeated Spec specs = 5;
  int32 rparen = 6;
}

message FuncDecl {
  CommentGroup doc = 1;
  FieldList recv = 2;
  Ident name = 3;
  FuncType type = 4;
  BlockStmt body = 5;
}

message File {
  string file_name = 1;
  CommentGroup doc = 2;
  int32 package = 3;
  Ident name = 4;
  repeated Decl decls = 5;
  repeated ImportSpec imports = 6;
  repeated Ident unresolved = 7;
  repeated CommentGroup comments = 8;
}

message Package {
  string name = 1;
  string path = 2;
  repeated File files = 3;
  repeated string var_init_order = 4;
}

message Packages {
  repeated Package packages = 1;
}